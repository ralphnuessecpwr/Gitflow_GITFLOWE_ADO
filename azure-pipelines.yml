name: $(Build.DefinitionName)_Branch_$(SourceBranchName)_Build.$(Rev:r)

pr: none

trigger:
- feature/*
- development
- release/*
- main

pool:
  name: 'Default'

variables:
- group: 'gitflow_GITFLOWE'
- name: upperBranchName
  value: $[upper(variables['Build.SourceBranchName'])]
- name: branchBuildNum
  value: '$(Rev:r)'
- name: branchMapping
  ${{ if contains(variables['Build.SourceBranch'], 'feature')}}:
    value: 'feature/** => FEAT,custom,PUSH TO FEATURE/$(upperBranchName)'
  ${{ elseif contains(variables['Build.SourceBranch'], 'release')}}:
    value: 'release/** => RLSE,per-branch'
- name: branchCreationRule
  ${{ if contains(variables['Build.SourceBranch'], 'feature')}}:
    value: 'custom'
  ${{ elseif contains(variables['Build.SourceBranch'], 'release')}}:
    value: 'per-branch'
- name: containerDescription
  ${{ if contains(variables['Build.SourceBranch'], 'feature')}}:
    value: 'PUSH TO FEATURE/$(upperBranchName)'
  ${{ else }}:
    value: "PUSH TO RLSE/$(upperBranchName)"
- name: codePipelineLevel
  ${{ if contains(variables['Build.SourceBranch'], 'feature')}}:
    value: 'FEAT'
  ${{ if contains(variables['Build.SourceBranch'], 'release')}}:
    value: 'RLSE'

jobs:
- job: synchMainframeCode
  condition: or( and( eq(variables.codePipelineLevel, 'FEAT'), ne(variables.branchBuildNum, 1) ), eq(variables.codePipelineLevel, 'RLSE') )
  displayName: Synch Mainframe Code
  steps:
  - checkout: self
    clean: true
    fetchDepth: 0
    fetchTags: true

# For the release branch change the sandbox flag from "Y" to "N"
  - task: PowerShell@2
    condition: eq(variables.codePipelineLevel, 'RLSE')
    name: deactivateSandboxFlag
    displayName: Deactivate Sandbox Flag
    inputs:
      targetType: 'inline'
      script: |
        $ispwConfigFilePath = '$(codePipelineConfigYml)'
        out-file -FilePath "$ispwConfigFilePath" -InputObject (Get-Content -Raw "$ispwConfigFilePath").Replace('sandbox: Y', 'sandbox: N') -Encoding utf8

# Prepare Parameters for Synchronization, depending on branch
  - task: PowerShell@2
    name: prepareSynch
    displayName: Prepare Synchronization
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        write-host "Build Number"
        Weite-Host $(branchBuildNum)

        $gitLocalPath               = '.\'
        $targetPath                 = '.\'
        $gitFullBranch              = "$(Build.SourceBranch)"
        $gitBranch                  = $gitFullBranch.substring($gitFullBranch.lastindexof('heads/') + 6)
        $restUri                    = "https://dev.azure.com/$(organization)/$(System.TeamProjectId)/_apis/build/builds/?definitions=$(System.DefinitionId)&branchName=$(Build.SourceBranch)&`$top=5&queryOrder=queueTimeDescending&api-version=5.1"
        
        $previousCommit             = ''

        if ($gitBranch.ToLower().Contains("feature")) {

          $response = Invoke-WebRequest -Uri $restUri -Headers @{"Authorization" = "Bearer $env:SYSTEM_ACCESSTOKEN"}

          if($response.StatusCode -eq 200) {

              $content        = ConvertFrom-Json $response.Content
              
          }
          else {
              
              Write-Host
              Write-Host "Query failed. Response"
              Write-Host $response

              Exit 1

          }
          
          $previousCommit   = $content.value[1].sourceVersion

        }
        else {

          $tagList            = (git tag --sort=-refname).Split("`n")
          $currentTag         = $tagList[0].Trim()

          if($tagList.Length -gt 1){            
            $previousTag      = $tagList[1].Trim()            
            $previousCommit   = (git rev-list -1 $previousTag).Trim()
          }
          else {
            $previousCommit   = (git rev-list --max-parents=0 HEAD).Trim()
          }   
          
          Write-Host "##vso[task.setvariable variable=releaseTag;isoutput=true]$currentTag"

        }

        Write-Host "##vso[task.setvariable variable=targetPath;isoutput=true]$targetPath"
        Write-Host "##vso[task.setvariable variable=gitBranch;isoutput=true]$gitBranch"
        Write-Host "##vso[task.setvariable variable=previousCommit;isoutput=true]$previousCommit"
        Write-Host "##vso[task.setvariable variable=gitLocalPath;isoutput=true]$gitLocalPath"

  # Synchronize code for feature branch
  - task: PowerShell@2
    name: synchMainframeCode2Branch
    displayName: Synchronize branch to Mainframe
    inputs:
      targetType: 'inline'
      script: |
        Write-Host 'Will synchronize Commits starting from' $(prepareSynch.previousCommit) 'and ending with' $(Build.SourceVersion)
        Write-Host 'Will map Git Branch' $gitBranch 'to ISPW Level $(codePipelineLevel), using Container Creation Rule' $(branchCreationRule)
        Write-Host
        Write-Host "Parameters"
        Write-Host
        Write-Host "Target Path       : $(prepareSynch.targetPath)"
        Write-Host "Config File       : $(codePipelineConfigYml)"
        Write-Host "Stream            : $(codePipelineStream)"
        Write-Host "App               : $(codePipelineApplication)"
        Write-Host "SubApp            : $(codePipelineSubApplication)"
        Write-Host "Assignment Prefix : $(codePipelineAssignmentPrefix)"
        Write-Host "Level             : $(codePipelineLevel)"
        Write-Host "Git Repo          : $(Build.Repository.Uri).git"
        Write-Host "Git Branch        : $(prepareSynch.gitBranch)"
        Write-Host "Git From          : $(prepareSynch.previousCommit)"
        Write-Host "Git To            : $(Build.SourceVersion)"
        Write-Host


        cmd.exe /c $(cliPath)\IspwCLI.bat `
          -operation syncGitToIspw `
          -host $(hostName) `
          -port $(hostHciPort) `
          -id $(hostUser) `
          -pass $(hostPassword) `
          -protocol None `
          -code $(hostCodePage) `
          -timeout 0 `
          -targetFolder $(prepareSynch.targetPath) `
          -data $(cliWorkspace) `
          -ispwServerConfig $(runtimeConfig) `
          -ispwConfigPath $(codePipelineConfigYml) `
          -ispwServerStream $(codePipelineStream) `
          -ispwServerApp $(codePipelineApplication) `
          -ispwServerSubAppl $(codePipelineSubApplication) `
          -assignmentPrefix $(codePipelineAssignmentPrefix) `
          -ispwCheckoutLevel $(codePipelineLevel) `
          -ispwContainerCreation "$(branchCreationRule)" `
          -ispwContainerDescription "$(containerDescription)" `
          -gitRepoUrl $(Build.Repository.Uri).git `
          -gitBranch $(prepareSynch.gitBranch) `
          -gitFromHash $(prepareSynch.previousCommit) `
          -gitCommit $(Build.SourceVersion) `
          -gitLocalPath $(prepareSynch.gitLocalPath)

  #- task: azure-deveops-ispw-operation-task@2
  #  name: synchMainframeCode2Branch
  #  displayName: Synchronize branch to Mainframe
  #  inputs:
  #    connectionId: $(hostConnection)      
  #    operationType: 'ISPWSYNC'
  #    windowsWorkbenchCliHome: $(cliPath)
  #    runtimeConfiguration: $(runtimeConfig)
  #    authenticationTypeIspwSync: 'USER'
  #    ispwusername: $(hostUser)
  #    ispwpassword: $(hostPassword)
  #    stream: $(codePipelineStream)
  #    application: $(codePipelineApplication)
  #    subApplication: $(codePipelineSubApplication)
  #    yamlMappingFile: $(codePipelineConfigYml)
  #    encryptionProtocol: 'NONE'
  #    codePage: '1047 - Latin 1 (Open Systems)'
  #    timeout: '0'
  #    branchMapping: $(branchMapping)
    

- job: checkParameters
  displayName: Check for Build Parameters
  dependsOn: synchMainframeCode
  condition: or(eq(variables.codePipelineLevel, 'FEAT'), eq(variables.codePipelineLevel, 'RLSE'))
  steps:
  - checkout: none
  - task: PowerShell@2
    name: buildParameters
    displayName: Check Results
    inputs:
      targetType: 'inline'
      script: |
        if(-not (Test-Path -Path .\automaticBuildParams.txt -PathType Leaf)) {

          Write-Host "No Mainframe Build parameters were found. Likely, no MF components were modified. The build will continue and just execute a code scan."
          Write-Host "##vso[task.complete result=Failed;]DONE"

        }
        else {

          Write-Host "Mainframe Build parameters were found. Will continue with full Mainframe Build process."
        
          [string]$fileContent  = ''          
          $fileContent          = Get-Content .\automaticBuildParams.txt
          $content              = ''

          foreach ($line in $fileContent) { $content = $content + "`n" + $line }
          
          $json                 = ConvertFrom-JSON $content

          $taskParm             = ""

          foreach($taskId in $json.taskIds) {
              $taskParm = $taskParm + $taskId + ","
          }

          $taskParm = $taskParm.Substring(0,$taskParm.Length - 1)

          $taskLevel    = $json.taskLevel
          $assignmentId = $json.containerId

          Write-Host "Identified" 
          Write-Host "  Tasks"
          Write-Host $taskParm
          Write-Host "  Assignment"
          Write-Host $assignmentId
          Write-Host "  Level"
          Write-Host $taskLevel

          Write-Host "##vso[task.setvariable variable=taskIds;isoutput=true]$taskParm"
          Write-Host "##vso[task.setvariable variable=taskLevel;isoutput=true]$taskLevel"
          Write-Host "##vso[task.setvariable variable=assignmentId;isoutput=true]$assignmentId"
        }

- job: buildMainframeCode
  displayName: Build and Deploy Mainframe Code
  dependsOn: checkParameters
  condition: and(succeeded('checkParameters'), or(eq(variables.codePipelineLevel, 'FEAT'), eq(variables.codePipelineLevel, 'RLSE')))
  variables:
    taskIds: $[ dependencies.checkParameters.outputs['buildParameters.taskIds'] ]
    taskLevel: $[ dependencies.checkParameters.outputs['buildParameters.taskLevel'] ]
    assignmentId: $[ dependencies.checkParameters.outputs['buildParameters.assignmentId'] ]
  steps: 
  - checkout: none
  - task: azure-deveops-ispw-operation-task@2
    displayName: Build Code
    inputs:
      connectionId: $(hostConnection)
      operationType: 'CES'
      cesUrl: $(cesUrl)
      cesSecretToken: '$(cesToken)'
      action: 'BuildAssignment'
      request: |
        runtimeConfiguration=$(runtimeConfig)
        taskIds=$(taskIds)
        assignmentId=$(assignmentId)
        application=$(codePipelineApplication)
        level=$(taskLevel)
      skipWaitingForSetCompletion: false
      showResponseBodyInConsole: true  

- job: runTests
  displayName: Execute Tests
  dependsOn: buildMainframeCode
  condition: and(succeeded('buildMainframeCode'), eq(variables.codePipelineLevel, 'FEAT'))
  steps:
  - checkout: none  

  # - task: BMCTTAutoRun@1
  #   displayName: Run Unit Tests
  #   inputs:
  #     HCIConnection: $(hostConnection)
  #     UserID: $(hostUser)
  #     Password: $(hostPassword)
  #     TestLocationPath: '$(testRootFolder)/$(testUnitFolder)'
  #     CLIInstallationPath: $(cliPath)
  #     Configuration: 'LocalTTTConf'
  #     LocalTTTConfiguration: '$(testRootFolder)/$(testConfigurationFolder)'

  - task: CmdLine@2
    displayName: Run Unit Tests
    inputs:
      script: |
        echo Executing Unit Tests using Parameters
        echo Environment      : $(testEnvironmentId)
        echo User ID          : $(hostUser)
        echo CES URI          : http://cwcc.bmc.com:2020
        echo CES User ID      : $(hostUser)
        echo Test Folder      : $(testRootFolder)/testUnitFolder
        
        $(cliPath)\TotalTestFTCLI.bat ^
          -e $(testEnvironmentId) ^
          -u $(hostUser) ^
          -p $(hostPassword) ^
          -s http://cwcc.bmc.com:2020/totaltestapi/ ^
          -cesu $(hostUser) ^
          -cesp $(hostPassword) ^
          -f $(testRootFolder)/$(testUnitFolder) ^
          -pnf changedPrograms.json ^
          -ccrepo $(codeCoverageRepo) ^
          -ccsys $(codeCoverageSystem) ^
          -cctid $(codeCoverageTestid) ^
          -ccclear true ^
          -ctxvars '"load_lib=SALESSUP.GITFLOWE.FEAT.LOAD"' ^
          -R ^
          -G ^
          -v 6 ^
          -l jenkins ^
          -loglevel INFO ^
          -data $(cliWorkspace)

  - task: CmdLine@2
    displayName: Run Integration Tests
    inputs:
      script: |
        echo Executing Integration Tests using Parameters
        echo Environment      : $(testEnvironmentId)
        echo User ID          : $(hostUser)
        echo CES URI          : http://cwcc.bmc.com:2020
        echo CES User ID      : $(hostUser)
        echo Test Folder      : $(testRootFolder)/testUnitFolder
        
        $(cliPath)\TotalTestFTCLI.bat ^
          -e $(testEnvironmentId) ^
          -u $(hostUser) ^
          -p $(hostPassword) ^
          -s http://cwcc.bmc.com:2020/totaltestapi/ ^
          -cesu $(hostUser) ^
          -cesp $(hostPassword) ^
          -f $(testRootFolder)/$(testIntegrationFolder) ^
          -pnf changedPrograms.json ^
          -ctxvars '"load_lib=SALESSUP.GITFLOWE.FEAT.LOAD"' ^
          -R ^
          -G ^
          -v 6 ^
          -l jenkins ^
          -loglevel INFO ^
          -data $(cliWorkspace)

  - task: PowerShell@2
    displayName: Set Code COverage Parms
    inputs:
      targetType: 'inline'
      script: |
        [System.Collections.ArrayList]$parmList= @()

        $parmList.Add("cc.repos=$(codeCoverageRepo)")
        $parmList.Add("cc.system=$(codeCoverageSystem)")
        $parmList.Add("cc.test=$(codeCoverageTestid)")
        $parmList.Add("cc.sources=$(codeCoverageSourcesFolder)")

        out-file -FilePath "./ccanalysis.properties" -InputObject $parmList -Encoding utf8

  - task: bmc-compuware-xpediter-code-coverage-plugin@1
    displayName: Download Code Coverage Data
    inputs:
      connectionId: $(hostConnection)
      userId: $(hostUser)
      credentialId: $(hostPassword)
      targetFolder: "$(Agent.BuildDirectory)/s"
      windowsTopazWorkbenchCliHome: '$(cliPath)'
      linuxTopazWorkbenchCliHome: '/u/bmc'
      m_analysisPropertiesPath: './ccanalysis.properties'
      # m_analysisProperties: | 
      #   cc.repos=$(codeCoverageRepo)
      #   cc.system=$(codeCoverageSystem)
      #   cc.test=$(codeCoverageTestid)
      #   cc.sources=$(codeCoverageSourcesFolder)

#  - task: CmdLine@2
#    displayName: Download Code Coverage Data
#    inputs:
#      script: |
#        echo Downloading Code Coverage Results using Parameters
#        echo Host IP        : $(hostName)
#        echo Port           : $(hostHciPort)
#        echo User ID        : $(hostUser)
#        echo Codepage       : $(hostCodePage)
#        echo CC Repository  : $(codeCoverageRepo)
#        echo CC System      : $(codeCoverageSystem)
#        echo CC Test ID     : $(codeCoverageTestid)
#        echo Sources Folder : $(codeCoverageSourcesFolder)
#
#        $(cliPath)\CodeCoverageCLI.bat ^
#          -host $(hostName) ^
#          -port $(hostHciPort) ^
#          -id $(hostUser) ^
#          -pass $(hostPassword) ^
#          -code $(hostCodePage) ^
#          -targetFolder $(Agent.BuildDirectory)/s ^
#          -data $(cliWorkspace) ^
#          --cc.repos $(codeCoverageRepo) ^
#          --cc.system $(codeCoverageSystem) ^
#          --cc.test $(codeCoverageTestid) ^
#          --cc.sources $(codeCoverageSourcesFolder) ^
#          -timeout 0

- job: sonar
  displayName: Run Sonar Scan
  dependsOn: runTests
  condition: always()
  steps:
  - checkout: none  
  - task: PowerShell@2
    name: collectOutputs
    displayName: Collect Output Files for Sonar
    inputs:
      targetType: 'inline'
      script: |
        $testScenariosParm          = ""
        $testResultsParm            = ""
        $codeCoverageParm           = ""

        $testUnitResultsPath        = "$(testOutputFolder)\$(testUnitFolder).cli.suite.sonar.xml"
        $testIntegrationResultsPath = "$(testOutputFolder)\$(testIntegrationFolder).cli.suite.sonar.xml"
        $codeCoverageResultsPath    = "$(codeCoverageFolder)\CodeCoverage.xml"

        if(Test-Path -Path $testUnitResultsPath -PathType Leaf) {

          $testScenariosParm  = "sonar.tests=$(testRootFolder)"
          $testResultsParm    = "sonar.testExecutionReportPaths=$testUnitResultsPath"

        }

        if(Test-Path -Path $testIntegrationResultsPath -PathType Leaf) {

          if($testResultsParm -eq "") {

            $testScenariosParm  = "sonar.tests=$(testRootFolder)"
            $testResultsParm    = "sonar.testExecutionReportPaths=$testIntegrationResultsPath"

          }
          else
          {

            $testResultsParm    = "$testResultsParm,$testIntegrationResultsPath"
          
          }
        }

        if(Test-Path -Path $codeCoverageResultsPath -PathType Leaf) {
          
          $codeCoverageParm = "sonar.coverageReportPaths=$codeCoverageResultsPath"
        
        }

        Write-Host "Sonar Parms"
        Write-Host "Scenario: $testScenariosParm"
        Write-Host "Results : $testResultsParm"
        Write-Host "CoCo    : $codeCoverageParm"

        Write-Host "##vso[task.setvariable variable=testScenariosParm;isoutput=true]$testScenariosParm"
        Write-Host "##vso[task.setvariable variable=testResultsParm;isoutput=true]$testResultsParm"
        Write-Host "##vso[task.setvariable variable=codeCoverageParm;isoutput=true]$codeCoverageParm"

  - task: SonarQubePrepare@5
    displayName: Prepare Analysis
    inputs:
      SonarQube: 'Sonar'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: 'GITFLOW_GITFLOWE_Azure'
      cliProjectName: 'GITFLOW_GITFLOWE_Azure'
      cliSources: './GenApp_MainframeCore/Sources'
      extraProperties: |
        sonar.branch.name=$(Build.SourceBranchName)
        sonar.cobol.copy.directories=./GenApp_MainframeCore/Sources
        sonar.cobol.file.suffixes=cbl,testsuite,testscenario,stub,result,scenario,context
        sonar.cobol.copy.suffixes=cpy
        $(collectOutputs.testScenariosParm)
        $(collectOutputs.testResultsParm)
        $(collectOutputs.codeCoverageParm)
        sonar.ws.timeout=480
        sonar.sourceEncoding=UTF-8

  - task: SonarQubeAnalyze@5
    displayName: Execute Analysis

  - task: SonarQubePublish@5
    displayName: Wait for Analysis to finish
    inputs:
      pollingTimeoutSec: '300'  

  - task: PowerShell@2
    displayName: Check Sonar Quality Gate
    inputs:
      targetType: 'inline'
      script: |
        #$fullBranch = "$(Build.SourceBranch)"
        #$gitBranch  = $fullBranch.substring($fullBranch.lastindexof('heads/') + 6)
        $gitBranch = "$(Build.SourceBranchName)"

        Write-Host "Retrieve Sonar Quality Gate status for"
        Write-Host "Project: $(sonarProjectName)"
        Write-Host "Branch : $gitBranch"

        $uri = "$(sonarServer)/api/qualitygates/project_status?projectKey=$(sonarProjectName)&branch=$gitBranch"
        $headers = @{}
        $headers.Add("Authorization", '"$(sonarToken)"')
        $headers.Add("Content-Type", "application/json")

        Write-Host
        Write-Host "Checking Sonar Quality Gate Status for Project "$(sonarProjectName)"."
        Write-Host "URL"
        Write-Host $uri
        $response = Invoke-RestMethod -Uri $uri -method GET -headers $headers
        
        $status = $response.projectStatus.status
        
        Write-Host
        Write-Host "Checked Sonar Quality Gate status for Project "$(sonarProjectName)"."
        Write-Host "Status is "$status"."
        
        if($status -ne "OK"){
            $LASTEXITCODE = 1
        }
        else
        {
            $LASTEXITCODE = 0
        }

- job: release
  displayName: Start Release
  dependsOn: 
  - synchMainframeCode
  - checkParameters
  - sonar
  condition: and(succeeded('sonar'), succeeded('checkParameters'), eq(variables.codePipelineLevel, 'RLSE'))
  variables:
    releaseTag: $[ dependencies.synchMainframeCode.outputs['synchMainframeCode2Branch.releaseTag'] ]
    assignmentId: $[ dependencies.checkParameters.outputs['buildParameters.assignmentId'] ]
  steps:
  - checkout: none
  - task: PowerShell@2
    name: triggerRelease
    displayName: Trigger Release
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        $restUri = "https://vsrm.dev.azure.com/$(organization)/$(System.TeamProjectId)/_apis/release/releases?api-version=5.1"
                    
        $headers = @{}
        $headers.Add("Authorization", "$(azureToken)")
        $headers.Add("Content-Type", "application/json")
        
        Write-Host "Release Tag : $(releaseTag)"
        Write-Host "Assignment  : $(assignmentId)"

        $releaseTag = "$(releaseTag)".Substring(1,8).Replace('.', '')
        $releaseId  = "$(codePipelineReleasePrefix)$releaseTag"

        $requestBody = '{
          "definitionId": "$(releaseDefinitionId)",
          "variables": {
            "assignmentId": {
              "value": "$(assignmentId)"
            },
            "releaseTag": {
              "value": "$(releaseTag)"
            },
            "releaseId": {
              "value": "'+$releaseId+'"
            }
          }
        }'

        Write-Host "Triggering Azure Release using REST API:"
        Write-Host "URL"
        Write-Host $restUri
        Write-Host "Body"
        Write-Host $requestBody

        $response = Invoke-RestMethod -Uri $restUri -method POST -headers $headers -body $requestBody

        Write-Host "Response"
        Write-Host $response